Section 8: Configure Database
• 



33. Database architecture overview
• Database
    ♦ PostgreSQL
        - Popular open source DB
        - Integrates with Django
    ♦ Docker Compose
        - Defined with project (re-usable)
        - Persistent data using volumes
        - Handles network configuration
        - Environment variable configuration

• Volumes
    - Persistent data
    - Maps directory in container to local machine



34. Add database service
• 




35. Database configuration with Django
• Steps for confiuguring database
    ♦ Confgure Django
        -> Tell Django how to connect
    ♦ Install database adaptor dependencies
        -> Install the tool Django uses to connect
    ♦ Update Python requirements


    ○ Before Django can connect to the databae, it needs to know:
        -> Engine (type of database)
        -> Hostname (IP or domain name for database)
        -> Port
        -> Database Name
        -> Username
        -> Password
    ^^ Defined in settings.py ^^

• Environment Variables 
    - Pull config values from environment variables
    - Easily passed to Docker
    - Used in local dev or prod
    - Single place to configure project
    - Easy to do with Python

• Psycopg2 - [The package you need in order for Django to connect to Database]
    - Most popular PostgreSQL adaptor for Python 
    - Supported by Django

    ○ Installation options
        ♦ psycopg2-binary
            - OK for development
            - Not good for production
        ♦ psycopg2
            - Compiles from source
            - Required additional dependencies
            - Easy to install with Docker
    ○ Installing Psycopg2
        - List of package dependencies in docs
            ☺ C compiler
            ☺ python3-dev
            ☺ libpq-dev
        - Equivalent packages for Alpine
            ☺ postgresql-client
            ☺ build-base
            ☺ postgresql-dev
            ☺ musl-dev




36. Install PostgreSQL database adaptor
• 




37. Configure database in Django
• 




38. Fixing database race condition
• Problem with Docker Compose
    - Using [depends_on] ensures service starts
        -> But doesn't ensure application is running

    ○ Solution
        -> Make Django 'wait for db'
        -> Continue when database s ready
        ==> Create custom Django management command

• When is this an issue
    - Running [docker-compose] locally
    - Running on deployed environment



39. Create core app
• 




40. Write tests for wat_for_db command
• 




41. Add wait_for_db command
• 




42. Database migrations
• Django ORM
    - Object Relational Mapper (ORM)
    - Abstraction layer for data
        -> Django handles database structure and changes
        -> Focus on Python code
        -> Use any database (within reason)




43. Update Docker Compose and CI/CD
• 




44. Summary
• In this Section
    ○ Configured PostgreSQL service
    ○ Set Django database configuration
    ○ Handled race condition (wait for db to be ready)
    ○ Added migration



