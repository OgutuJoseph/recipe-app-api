Section 7: Test Driven Development with Django





27. Testing in Django
• Django test framework 
    - In built
    - Based on the unittest library
    - Django adds features
        ☺ Test client -dummy web browser
        ☺ Simulate authentication
        ☺ Temporary database
    
    - Django REST Framework adds features
        ☺ API test client

• Where do you put tests?
    - Placeholder [tests.py] added to each app
    - Alternatively, create [tests/] subdirectory to split tests up
    - Keep in mind:
        ○ Only use [tests.py] or [tests/] directory <not both>
        ○ Tests modules must start with [test_]
        ○ Test directories must contain [__init__.py] <this is what allows Django to pick tests in the main runner>


• Test Database
    - Test  code that uses DB
    - Django automatically creates a specific database for tests


• Test classes
    ♦ SimpleTestCase
        - No database integration 
        - Useful if no database required for your test
        - Save time executing tests
    ♦ TestCase
        - Database integration
        - Useful for testing code that uses the database


• Writing Tests
    ○ Import test class
    ○ Import objects to test
    ○ Define test class
    ○ Add test method
    ○ Setup inputs
    ○ Execute code to be tested
    ○ Check output




28. Write a Test
• 
    --> docker-compose run --rm app sh -c "python manage.py test"




29. Write a test using TDD
• 




30. Mocking
• What is Mocking?
    - Override or change behaviour of dependencies
        ^ [helps to] - Avoid unintended side effects and consequences when running your test code
                     - Isolate code being tested

• Why use Mocking?
    - Avoid relying on external test services
        ○ Can't guarantee they will be available
        ○ Makes tests unpredictable and inconsistent
    - Avoid unintended consequences
        E.g.,
        ○ Accidentally sending emails
        ○ Overloading external services

        E.g., <Test case>
        [register_user()] --> [create_in_db()] --> ***[send_welcome_email()]***
            ^ Mock the [send_welcome_email()]

            ♦ Prevent email being sent
            ♦ Ensure send_welcome_email() called correctly (as per your expectations)

    - Speed up tests

• How to mock code?
    -> Use [unittest.mock] library
        ○ [MagickMock/Mock] class - Replace real objects
        ○ [patch] - Overrides code for tests



31. Testing web requests
• 




32. Common testing problems
• 




Quiz 4: TDD with Django
• 



